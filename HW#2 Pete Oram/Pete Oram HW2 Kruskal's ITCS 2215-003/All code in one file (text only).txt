//Pete Oram
//ITCS 2215-003
//HW #2
//#800159179


//Kruskal class
//-----------------------------------------------------------------------------------------------------------------------------------

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

/**
 * This program implements Kruskal's algorithm to find the Minimum Spanning Tree of a graph.
 * The input file is the adjacency list of the graph, the output file contains the edges that are part 
 * of the Minimum Spanning Tree (MST).
 * 
 * @Pete Oram #800159179
 * @ITCS-2215-003 HW #2
 * @3/19/2014
 */
public class Kruskal
{    
    private int visited[]; //Node visited
    public int spanning_tree[][]; //Spanning tree
    private List<Edge> edges;
    private int numVertices; //For counting number of vertices
    public static final int MAX_VALUE = 999;    
    
    public Kruskal(int numVertices) //Takes in the number of vertices
    {
        this.numVertices = numVertices;
        visited = new int[this.numVertices + 1];
        spanning_tree = new int[numVertices + 1][numVertices + 1];
        edges = new LinkedList<Edge>(); //Creates new linked list      
    }
  
    public void kAlgorithm(int adjacencyMatrix[][])
    {
        boolean finished = false;
        for (int source = 1; source <= numVertices; source++)//Iterate while source is less than or equal to the number of vertices
        {
            for (int destination = 1; destination <= numVertices; destination++)
            {
                if (adjacencyMatrix[source][destination] != MAX_VALUE && source != destination)
                {
                    Edge edge = new Edge();
                    edge.sourcevertex = source;
                    edge.destinationvertex = destination;
                    edge.weight = adjacencyMatrix[source][destination];
                    adjacencyMatrix[destination][source] = MAX_VALUE;
                    edges.add(edge);
                }
            }
        }
        Collections.sort(edges, new EdgeComparator());
        CheckCycle checkCycle = new CheckCycle();
        for (Edge edge : edges)
        {
            spanning_tree[edge.sourcevertex][edge.destinationvertex] = edge.weight;
            spanning_tree[edge.destinationvertex][edge.sourcevertex] = edge.weight;
            if (checkCycle.checkCycle(spanning_tree, edge.sourcevertex))
            {
                spanning_tree[edge.sourcevertex][edge.destinationvertex] = 0;
                spanning_tree[edge.destinationvertex][edge.sourcevertex] = 0;
                edge.weight = -1;
                continue;
            }
            visited[edge.sourcevertex] = 1;//Set to 1
            visited[edge.destinationvertex] = 1;
            for (int i = 0; i < visited.length; i++)//Will iterate until all visited
            {
                if (visited[i] == 0)
                {
                    finished = false;
                    break;
                } else
                {
                    finished = true;
                }
            }
            if (finished)
                break;
        }  
    }
}


//Driver
//-----------------------------------------------------------------------------------------------------------------------------------

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

/**
 * This program implements Kruskal's algorithm to find the Minimum Spanning Tree of a graph.
 * The input file is the adjacency list of the graph, the output file contains the edges that are part 
 * of the Minimum Spanning Tree (MST).
 * 
 * @Pete Oram #800159179
 * @ITCS-2215-003 HW #2
 * @3/19/2014
 */
public class Driver
{
   public static void main(String args) throws Exception
    {
        int adj_matrix[][];
        int num_of_vertices;
        String filename = "inputfile";
        String opfile = "outputfile";
        Scanner console = new Scanner(System.in);
        System.out.println("Enter the filename :");
        filename = console.nextLine();
        System.out.println("Enter the output filename :");
        opfile = console.nextLine();
        Scanner scan = new Scanner(new File(filename));
        ArrayList<String> al = new ArrayList<String>();
        HashMap<String,Integer> map = new HashMap<String, Integer>();
        HashMap<Integer,String> revmap = new HashMap<Integer,String>();
        int i = 1;
        while(scan.hasNext())//Reads in the graph from file
        {
            String line = scan.nextLine();
            String toks[] = (line.trim()).split("[ ,]");
            al.add(line);
            map.put(toks[0], i);
            revmap.put(i,toks[0]);
            i++;
        }
        num_of_vertices = al.size();
        adj_matrix = new int[num_of_vertices + 1][num_of_vertices + 1];
  
        for(int k = 0; k < al.size();k++)//Iterate to get all characters and separate them with comma
        {
            String line = al.get(k);
             
            String toks[] = (line.trim()).split("[ ,]");
            int src = map.get(toks[0]);
            for(int l = 2; l < toks.length; l += 4 )
            {
                
                int dest = map.get(toks[l]);
                int weight = Integer.parseInt(toks[l+2  ]);
                adj_matrix[src][dest] = weight;
                adj_matrix[dest][src] = weight;
            }
        }
         
        Kruskal kAlgorithm = new Kruskal(num_of_vertices);//Create new Kruskal object
        kAlgorithm.kAlgorithm(adj_matrix);
        int[][] spantree = kAlgorithm.spanning_tree;
        PrintWriter writer = new PrintWriter(opfile, "UTF-8");//Print
        for(int a = 1; a <= num_of_vertices; a++)
        {
            for(int b = a+1;b<=num_of_vertices;b++)
            {
                if(spantree[a][b] != 0)
                {
                    writer.println(revmap.get(a)+", "+revmap.get(b));
                }
            }
        }
        scan.close();
        writer.close();
        console.close();
    }
}

//Edge class
//-----------------------------------------------------------------------------------------------------------------------------------

import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

/**
 * This program implements Kruskal's algorithm to find the Minimum Spanning Tree of a graph.
 * The input file is the adjacency list of the graph, the output file contains the edges that are part 
 * of the Minimum Spanning Tree (MST).
 * 
 * @Pete Oram #800159179
 * @ITCS-2215-003 HW #2
 * @3/19/2014
 */
public class Edge
{
    int weight;//Weight of the edge
    int sourcevertex;//Number for the source vertex
    int destinationvertex;//Destination vertex   
}
//-----------------------------------------------------------------------------------------------------------------------------------

class CompareEdge implements Comparator<Edge> //Looks at the weight of the edges and compares them 
{
    public int compare(Edge edge1, Edge edge2)
    {
        if (edge1.weight < edge2.weight)
            return -1;
        if (edge1.weight > edge2.weight)
            return 1;
        return 0;
    }
}
//-----------------------------------------------------------------------------------------------------------------------------------

class CycleCheck //Stack is used to pop off top elements
{
    private Stack<Integer> stack;
    private int adjacencyMatrix[][];
  
    public  CycleCheck()
    {
        stack = new Stack<Integer>();
    }
  
    public boolean CycleCheck(int adj_matrix[][], int source)
    {
        boolean cyclepresent = false;
        int number_of_nodes = adj_matrix[source].length - 1; 
        adjacencyMatrix = new int[number_of_nodes + 1][number_of_nodes + 1];
        for (int sourcevertex = 1; sourcevertex <= number_of_nodes; sourcevertex++)
        {
            for (int destinationvertex = 1; destinationvertex <= number_of_nodes; destinationvertex++)
            {
                adjacencyMatrix[sourcevertex][destinationvertex] = adj_matrix[sourcevertex][destinationvertex];
            }
         }
  
         int visited[] = new int[number_of_nodes + 1];
         int element = source;
         int i = source;
         visited[source] = 1;
         stack.push(source);
  
         while (!stack.isEmpty())//Will iterate as long is the stack has values
         {
             element = stack.peek();
             i = element;
             while (i <= number_of_nodes)
             {
                 if (adjacencyMatrix[element][i] >= 1 && visited[i] == 1)
                 {
                     if (stack.contains(i))
                     {
                         cyclepresent = true;
                         return cyclepresent;
                     }
                 }
                 if (adjacencyMatrix[element][i] >= 1 && visited[i] == 0)
                 {
                     stack.push(i);
                     visited[i] = 1;
                     adjacencyMatrix[element][i] = 0;// mark as labelled;
                     adjacencyMatrix[i][element] = 0;
                     element = i;
                     i = 1;
                     continue;
                  }
                  i++;
             }
             stack.pop();
        }
        return cyclepresent;
    }
}




